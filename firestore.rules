rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is a child
    function isChild() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'child';
    }

    // Users can read/update their own profile.
    // New users can be created during sign-up.
    match /users/{userId} {
      allow read, update: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn();
    }
    
    // Quizzes can be read by any authenticated user (so children can see them).
    // Quizzes can only be created or modified by admins.
    match /quizzes/{quizId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // Preloaded quizzes can be read by any authenticated user.
    // They should be managed from the Firebase console or a seeding script, so no client writes.
    match /preloadedQuizzes/{quizId} {
        allow read: if isSignedIn();
        allow write: if false;
    }

    // Quiz attempts can be created by any authenticated user (children).
    // An attempt can be read by the user who created it, or by their parent.
    match /quizAttempts/{attemptId} {
       allow create: if isSignedIn();
       allow read: if isSignedIn() && 
                      (request.auth.uid == resource.data.userId || 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // Attempts should not be updatable or deletable from the client.
      allow update, delete: if false;
    }

    // Achievements can be read by anyone (so parents can see child achievements).
    // They are only created on the server, so no client writes.
    match /userAchievements/{achievementId} {
        allow read: if isSignedIn();
        allow write: if false;
    }
  }
}
