
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }
    
    // An admin has the 'admin' role.
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // A parent has the 'parent' role. An admin is NOT a parent in terms of data hierarchy.
    function isParent() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }

    function isChild() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'child';
    }

    function isTheirParent(childId) {
      let user = get(/databases/$(database)/documents/users/$(childId)).data;
      return exists(/databases/$(database)/documents/users/$(childId)) &&
             isParent() && request.auth.uid in user.parentIds;
    }

    match /users/{userId} {
      // Admins can read any user. Parents can read their children. Users can read themselves.
      allow read: if (isSignedIn() && request.auth.uid == userId) || isTheirParent(userId) || isAdmin();
      // Admins can update any user. Users can only update themselves.
      allow update: if (isSignedIn() && request.auth.uid == userId) || isAdmin();
      // Allow user creation for self sign-up, for a parent creating a child, or for an admin.
      allow create: if (isSignedIn() && request.auth.uid == userId) || 
                     (isParent() && request.auth.uid in request.resource.data.parentIds) ||
                     isAdmin();
    }
    
    match /quizzes/{quizId} {
      // Admins can read any quiz. Owners can read their own quizzes. 
      // Children can read quizzes owned by their parents.
      allow read: if isAdmin() || 
                     (isSignedIn() && request.auth.uid == resource.data.ownerId) || 
                     (isChild() && resource.data.ownerId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.parentIds);
      // Parents and Admins can manage quizzes.
      allow create, update, delete: if isParent() || isAdmin();
    }

    match /preloadedQuizzes/{quizId} {
        allow read: if isSignedIn();
        allow write: if false;
    }

    match /quizAttempts/{attemptId} {
       allow create: if isSignedIn() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.createdAt == request.time;
       // Admins can read all attempts. Parents can read their children's attempts.
       allow read: if (isSignedIn() && request.auth.uid == resource.data.userId) || 
                      isTheirParent(resource.data.userId) || 
                      isAdmin();
      allow update, delete: if false;
    }

    match /userAchievements/{achievementId} {
        // Admins can read all achievements. Parents can read their children's achievements.
        allow read: if (isSignedIn() && request.auth.uid == resource.data.userId) || 
                       isTheirParent(resource.data.userId) ||
                       isAdmin();
        allow write: if false;
    }
  }
}
